import { useState, useEffect } from 'react';
import { api } from "../api";
import { useNavigate } from "react-router-dom";
import Header from "../components/Header";
import { Button, Form, Card, CardBody, Divider, Snippet } from "@heroui/react";
import { Input } from "@heroui/input";
import ImagePreview from "../components/ImagePreview";
import LinkValidator from "../components/LinkValidator";

/**
 * Example data from existing doctors for form placeholders
 */
const EXAMPLE_DATA = {
  emails: [
    'ivanov@alenushka-pediatr.ru',
    'petrov@alenushka-pediatr.ru',
    'sidorov@alenushka-pediatr.ru'
  ],
  names: [
    '–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á',
    '–ü–µ—Ç—Ä–æ–≤–∞ –ú–∞—Ä–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞',
    '–°–∏–¥–æ—Ä–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á'
  ],
  descriptions: [
    '–≤—Ä–∞—á-–ø–µ–¥–∏–∞—Ç—Ä',
    '–≤—Ä–∞—á-–ø–µ–¥–∏–∞—Ç—Ä, –Ω–µ–æ–Ω–∞—Ç–æ–ª–æ–≥',
    '–≤—Ä–∞—á-–ø–µ–¥–∏–∞—Ç—Ä, –¥–µ—Ç—Å–∫–∏–π –∫–∞—Ä–¥–∏–æ–ª–æ–≥'
  ],
  imageUrls: [
    'https://alenushka-pediatr.ru/static/images/doctors/karakulova.jpg',
    'https://alenushka-pediatr.ru/static/images/doctors/sidor.jpg',
    'https://alenushka-pediatr.ru/static/images/doctors/yakovleva.jpg'
  ],
  externalUrls: [
    'https://alenushka-pediatr.ru/staff?doctor=ivanov',
    'https://alenushka-pediatr.ru/staff?doctor=petrova',
    'https://alenushka-pediatr.ru/staff?doctor=sidorov'
  ]
};

/**
 * DoctorRegister component for admin-only doctor registration
 * Creates both User and Doctor records in a single transaction
 */
export default function DoctorRegister() {
  const [formData, setFormData] = useState<DoctorRegistrationForm>({
    email: '',
    password: '',
    name: '',
    description: '',
    imageUrl: '',
    externalUrl: ''
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<DoctorRegistrationResponse | null>(null);
  const [exampleIndex, setExampleIndex] = useState(0);
  const navigate = useNavigate();

  /**
   * Cycle through example data every 3 seconds for demonstration
   */
  useEffect(() => {
    const interval = setInterval(() => {
      setExampleIndex((prev) => (prev + 1) % EXAMPLE_DATA.emails.length);
    }, 3000);
    return () => clearInterval(interval);
  }, []);

  /**
   * Handle form field changes
   */
  const handleInputChange = (field: keyof DoctorRegistrationForm, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    setError(null); // Clear error when user starts typing
  };

  /**
   * Fill form with example data for quick testing
   */
  const fillWithExample = () => {
    setFormData({
      email: EXAMPLE_DATA.emails[exampleIndex],
      password: 'TempPassword123!',
      name: EXAMPLE_DATA.names[exampleIndex],
      description: EXAMPLE_DATA.descriptions[exampleIndex],
      imageUrl: EXAMPLE_DATA.imageUrls[exampleIndex],
      externalUrl: EXAMPLE_DATA.externalUrls[exampleIndex]
    });
  };

  /**
   * Validate form data before submission
   */
  const validateForm = (): string | null => {
    if (!formData.email.trim()) return 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.password.trim()) return '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.name.trim()) return '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (!formData.description.trim()) return '–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    if (!formData.imageUrl.trim()) return 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    if (!formData.externalUrl.trim()) return '–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';

    // Email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email';

    // Password validation
    if (formData.password.length < 8) return '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤';

    // URL validation
    try {
      new URL(formData.imageUrl);
      new URL(formData.externalUrl);
    } catch {
      return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL';
    }

    return null;
  };

  /**
   * Handle form submission
   */
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setIsLoading(true);
    setError(null);

    try {
      const response = await api.post('/auth/register-doctor', formData);
      setSuccess(response.data);

      // Reset form
      setFormData({
        email: '',
        password: '',
        name: '',
        description: '',
        imageUrl: '',
        externalUrl: ''
      });
    } catch (err: unknown) {
      if (err && typeof err === 'object' && 'response' in err) {
        const axiosError = err as { response: { data: { message: string } } };
        setError(axiosError.response?.data?.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞');
      } else {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–∞—á–∞');
      }
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Copy text to clipboard
   */
  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text);
  };

  return (
    <div className="min-h-screen flex flex-col bg-gray-100">
      <Header />
      <div className="flex-1 overflow-y-auto">
        <div className="container mx-auto px-4 py-6 max-w-4xl">
          {success ? (
            <Card className="bg-green-50 border-green-200 mb-6">
              <CardBody className="space-y-4">
                <h2 className="text-2xl font-semibold text-green-800">
                  ‚úÖ –í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!
                </h2>

                <div className="grid lg:grid-cols-2 gap-4">
                  <div>
                    <h3 className="font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</h3>
                    <p><strong>ID:</strong> {success.user.id}</p>
                    <p><strong>Email:</strong> {success.user.email}</p>
                    <p><strong>–†–æ–ª—å:</strong> {success.user.role}</p>
                  </div>

                  <div>
                    <h3 className="font-semibold mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ:</h3>
                    <p><strong>ID:</strong> {success.doctor.id}</p>
                    <p><strong>–ò–º—è:</strong> {success.doctor.name}</p>
                    <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {success.doctor.description}</p>
                  </div>
                </div>

                <Divider />

                <div>
                  <h3 className="font-semibold mb-2">–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ):</h3>
                  <div className="flex flex-col gap-2">
                    <Snippet
                      symbol="üìß"
                      color="primary"
                      onCopy={() => copyToClipboard(success.credentials.email)}
                    >
                      {success.credentials.email}
                    </Snippet>
                    <Snippet
                      symbol="üîë"
                      color="secondary"
                      onCopy={() => copyToClipboard(success.credentials.password)}
                    >
                      {success.credentials.password}
                    </Snippet>
                  </div>
                </div>

                <div className="flex flex-col sm:flex-row gap-2">
                  <Button
                    color="primary"
                    onClick={() => setSuccess(null)}
                    className="flex-1"
                  >
                    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –≤—Ä–∞—á–∞
                  </Button>
                  <Button
                    color="secondary"
                    variant="bordered"
                    onClick={() => navigate('/rooms')}
                    className="flex-1"
                  >
                    –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º
                  </Button>
                </div>
              </CardBody>
            </Card>
          ) : (
            <Form onSubmit={handleSubmit} className="bg-white p-6 rounded-lg shadow-md mb-6">
              <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center mb-6 gap-4">
                <h2 className="text-2xl font-semibold">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–∞</h2>
                <Button
                  type="button"
                  color="secondary"
                  variant="bordered"
                  size="sm"
                  onClick={fillWithExample}
                  className="self-start sm:self-auto"
                >
                  –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–∏–º–µ—Ä–æ–º
                </Button>
              </div>

              {error && (
                <div className="mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded">
                  {error}
                </div>
              )}

              <div className="grid lg:grid-cols-2 gap-6">
                {/* User Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-700">–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>

                  <Input
                    type="email"
                    label="Email"
                    placeholder={`–ü—Ä–∏–º–µ—Ä: ${EXAMPLE_DATA.emails[exampleIndex]}`}
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    required
                    description="–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"
                  />

                  <Input
                    type="password"
                    label="–ü–∞—Ä–æ–ª—å"
                    placeholder="–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤"
                    value={formData.password}
                    onChange={(e) => handleInputChange('password', e.target.value)}
                    required
                    description="–ü–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞"
                  />
                </div>

                {/* Doctor Information */}
                <div className="space-y-4">
                  <h3 className="text-lg font-semibold text-gray-700">–î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞</h3>

                  <Input
                    type="text"
                    label="–ü–æ–ª–Ω–æ–µ –∏–º—è"
                    placeholder={`–ü—Ä–∏–º–µ—Ä: ${EXAMPLE_DATA.names[exampleIndex]}`}
                    value={formData.name}
                    onChange={(e) => handleInputChange('name', e.target.value)}
                    required
                    description="–§–ò–û –≤—Ä–∞—á–∞"
                  />

                  <Input
                    type="text"
                    label="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
                    placeholder={`–ü—Ä–∏–º–µ—Ä: ${EXAMPLE_DATA.descriptions[exampleIndex]}`}
                    value={formData.description}
                    onChange={(e) => handleInputChange('description', e.target.value)}
                    required
                    description="–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è"
                  />
                </div>
              </div>

              <Divider className="my-6" />

              {/* Media and Links */}
              <div className="space-y-6">
                <h3 className="text-lg font-semibold text-gray-700">–ú–µ–¥–∏–∞ –∏ —Å—Å—ã–ª–∫–∏</h3>

                <div className="grid lg:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <Input
                      type="url"
                      label="URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
                      placeholder={`–ü—Ä–∏–º–µ—Ä: ${EXAMPLE_DATA.imageUrls[exampleIndex]}`}
                      value={formData.imageUrl}
                      onChange={(e) => handleInputChange('imageUrl', e.target.value)}
                      required
                      description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤—Ä–∞—á–∞"
                    />

                    <div>
                      <p className="text-sm text-gray-600 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</p>
                      <ImagePreview
                        imageUrl={formData.imageUrl}
                        alt={formData.name || '–§–æ—Ç–æ –≤—Ä–∞—á–∞'}
                        className="w-32 h-32"
                      />
                    </div>
                  </div>

                  <div className="space-y-4">
                    <Input
                      type="url"
                      label="–í–Ω–µ—à–Ω—è—è —Å—Å—ã–ª–∫–∞"
                      placeholder={`–ü—Ä–∏–º–µ—Ä: ${EXAMPLE_DATA.externalUrls[exampleIndex]}`}
                      value={formData.externalUrl}
                      onChange={(e) => handleInputChange('externalUrl', e.target.value)}
                      required
                      description="–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ä–∞—á–∞ –Ω–∞ —Å–∞–π—Ç–µ"
                    />

                    <div>
                      <p className="text-sm text-gray-600 mb-2">–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏:</p>
                      <LinkValidator
                        url={formData.externalUrl}
                        label="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ä–∞—á–∞"
                      />
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-8 flex flex-col sm:flex-row gap-4">
                <Button
                  type="submit"
                  color="primary"
                  isLoading={isLoading}
                  className="flex-1"
                  size="lg"
                >
                  {isLoading ? '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–∞—á–∞'}
                </Button>
                <Button
                  type="button"
                  color="secondary"
                  variant="bordered"
                  onClick={() => navigate('/rooms')}
                  className="sm:w-auto"
                  size="lg"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </Form>
          )}
        </div>
      </div>
    </div>
  );
}
